library(DT)
library(shiny)
function(input, output, session) {
  
  #Structure
  output$structure <- renderPrint(
    df %>% 
      structure()
  )
  
  #Summary
  output$summary <- renderPrint(
    df %>% 
      summary()
  )
  
  #DataTable
  output$dataTable <- renderDataTable(
    df
  )
  
  #Create Graphs for Selected Variable
  
  #Boxplot
  output$histplot <- renderPlotly({
    p1 <- df %>% 
      plot_ly() %>% 
      add_histogram(x=~get(input$var1)) %>% 
      layout(xaxis = list(title = paste(input$var1)))
    
    p2 <- df %>% 
      plot_ly() %>% 
      add_boxplot(x=~get(input$var1)) %>% 
      layout(yaxis = list(showticklabels = F))
    
    
    #Stack Plots
    subplot(p2, p1, nrows=2) %>% 
      layout(title = "Distribution chart - Histogram and Boxplot",
             yaxis = list(title="Frequency"))
  })
  
  #Correlation Matrix
  output$cor <- renderPlotly({
    df_corr <- df %>% 
      select(-"State", -"UrbanPop")
    
    # Calculate correlation matrix
    corr_matrix <- cor(df_corr, use = "pairwise.complete.obs")
    corr <- round(corr_matrix, 1)
    p.mat <- cor_pmat(df_corr)
    
    # Generate the correlation plot
    corr_plot <- ggcorrplot(
      corr,
      hc.order = TRUE,
      lab = TRUE,
      p.mat = p.mat
    )
    
    ggplotly(corr_plot) 
    
  })

  
  #Scatterplot
  output$scatterplot <- renderPlotly({
    p3 <- df %>% 
      ggplot(aes(x=get(input$var3), y=get(input$var4))) +
      geom_point() +
      geom_smooth(method="lm") +
      labs(title = paste("Relation between", input$var3, "and", input$var4),
           x= input$var3,
           y = input$var4)
    ggplotly(p3)
  })
  
  #Barchart  
  output$StateBarchart <- renderPlotly({
    df %>% 
      plot_ly() %>% 
      add_bars(x=df$State, y=~get(input$var2)) %>% 
      layout(title = paste("Statewise arrests for", input$var2),
             xaxis = list(title = "State"),
             yaxis = list(title = paste(input$var2, "Arrests per 100.000 residents")))
    
  })
  
  output$header5high <- renderText({
    paste("5 states with the highest", input$var2, "arrests")
  })
  
  output$header5low <- renderText({
    paste("5 states with the lowest", input$var2, "arrests")
  })
  
  output$high5 <- renderTable({
    df %>% 
      select(State, input$var2) %>% 
      arrange(desc(get(input$var2))) %>% 
      head(5)
  })
  
  output$low5 <- renderTable({
    df %>% 
      select(State, input$var2) %>% 
      arrange(get(input$var2)) %>% 
      head(5)
  })
 
  #Maps plot
  output$map_plot <- renderPlot({
   
  })
}
